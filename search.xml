<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>微软（苏州）Onsite面经</title>
      <link href="2020/11/21/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%BE%AE%E8%BD%AF%E9%9D%A2%E8%AF%95/"/>
      <url>2020/11/21/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%BE%AE%E8%BD%AF%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>前一段时间找人内推了微软苏州，职位是 Microsoft search team的 software engineer。 面试之前听说微软会狂怼算法， 然而平常算法刷的不多，所以花了几天时间临时抱佛脚突击刷了一些常见的算法（内心OS： 巨硬应该不会按照常规套路出招）。</p><p>面试用的是 M 家自带的 Microsoft team， 体验倒没有网上说的那么不堪， 感觉良好。面试官好像不是这个team 的， 但是说话很亲和， 也比较好沟通。上来先自我介绍了下， 然后就是问项目， 时间差不多了， 开始了写题时间。 开了一个共享的一个online编辑器 <a href="http://collabedit.com.emmm,/">http://collabedit.com。emmm，</a> 其实就是个白板。</p><p>第一题： 给一棵二叉树， 和一个 target（二叉树某节点）， 找出所有与target距离为 k 的节点的值的集合。</p><p>这道题，我一开始居然卡住了，因为找距离为 k 的点的话需要往很多方向去找，还要处理 k 值过大的问题（不存在与target 距离 为 k 的点），而二叉树的节点只有指向左节点和右节点的两个指针， 如果还有个 parent 指针的话应该可以解决问题。和面试官确认了下确实节点只有两个指针（太紧张了没想到自己遍历的时候保存每个节点的父指针）。后来面试官提示了下，突然恍然大悟， 给出了自己的一个思路：</p><p>先遍历二叉树所有节点， 用 hashMap 存储每个节点和父亲节点的映射， 这样的话这棵二叉树可以看作一个无向图， 我可以往每个节点的任意一个方向走。 我们把 target节点当成起点， 借助队列向周围三个方向做 BFS， 找到所有距离为 k 的点的集合，过程中用一个 哈希表标记节点是否被访问过，防止走回头路。以下直接附上代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    HashMap&lt;TreeNode, TreeNode&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    Set&lt;TreeNode&gt; isVisited = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">distanceK</span><span class="params">(TreeNode root, TreeNode target, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; results = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span> || target == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> results;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        traversal(root);</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue.offer(target);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> qSize = queue.size();</span><br><span class="line">            <span class="keyword">if</span> (res == K) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; qSize; i++) &#123;</span><br><span class="line">                    <span class="keyword">int</span> val = queue.poll().val;</span><br><span class="line">                    results.add(val);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> results;</span><br><span class="line">            &#125; </span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; qSize; i++) &#123;</span><br><span class="line">                TreeNode cur = queue.poll();</span><br><span class="line">                isVisited.add(cur);</span><br><span class="line">                <span class="keyword">if</span> (cur.left != <span class="keyword">null</span> &amp;&amp; !isVisited.contains(cur.left)) &#123;</span><br><span class="line">                    queue.add(cur.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (cur.right != <span class="keyword">null</span> &amp;&amp; !isVisited.contains(cur.right)) &#123;</span><br><span class="line">                    queue.add(cur.right);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (map.get(cur) != <span class="keyword">null</span> &amp;&amp; !isVisited.contains(map.get(cur))) &#123;</span><br><span class="line">                    queue.add(map.get(cur));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            res++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> results;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">traversal</span><span class="params">(TreeNode node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">            map.put(node.left, node);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">            map.put(node.right, node);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        traversal(node.left);</span><br><span class="line">        traversal(node.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前只是第一轮的 onsite， 如果有第二轮的话会在下面继续更新。</p>]]></content>
      
      
      <categories>
          
          <category> 面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微软 </tag>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中static, final, static final的区别</title>
      <link href="2020/11/21/Java%E5%85%B3%E9%94%AE%E5%AD%97static%E5%92%8Cfinal/"/>
      <url>2020/11/21/Java%E5%85%B3%E9%94%AE%E5%AD%97static%E5%92%8Cfinal/</url>
      
        <content type="html"><![CDATA[<p>通常情况下， 类成员需要通过它的类的对象访问，如果一个成员被声明为static，它能够在它的类的任何对象创建之前被访问， 而不用引用任何对象。<br>声明为<code>static</code>的一个类变量或方法，所有的该类的实例都会共享这个<code>static</code>变量或方法。</p><h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><h4 id="static修饰变量"><a href="#static修饰变量" class="headerlink" title="static修饰变量"></a>static修饰变量</h4><a id="more"></a><p>静态变量在内存中只有一份， jvm只为静态变量分配一次内存，随着类的加载而加载到静态方法区内存中。由于静态变量属于类，和类的实例无关， 所以可以直接通过类名进行访问。</p><p>对于成员变量，每创建一个该类的实例就会创建该成员变量的一个拷贝，分配一次内存，由于成员变量是和类的实例绑定的，所以不能直接通过类名对它进行访问。</p><h4 id="static修饰方法"><a href="#static修饰方法" class="headerlink" title="static修饰方法"></a>static修饰方法</h4><ul><li>只能调用其他的static方法</li><li>只能访问static数据</li><li>不能以任何方式引用<code>this</code> 和<code>super</code></li></ul><p>静态方法可以直接通过类名调用， 任何该类的实例也可以调用它的静态方法， 所以静态方法不能用<code>this</code>或者<code>super</code>。</p><blockquote><p>static 方法独立于任何实例， 所以static方法必须被实现，不能是抽象的absract，在static方法里引用任何的实例变量都是违法的。</p></blockquote><h4 id="static-修饰类"><a href="#static-修饰类" class="headerlink" title="static 修饰类"></a>static 修饰类</h4><p>普通类不允许被声明为静态， 只有内部类才可以。被<code>static</code>修饰的内部类可以作为一个普通类来使用， 而不需实例一个外部类（不需要new，直接静态加载）。</p><p>内部类没有使用<code>static</code>关键字，不能直接创建实例。</p><p><strong>不使用static修饰内部类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span></span>&#123;</span><br><span class="line">        InnerClass()&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStaticClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// OutClass需要先生成一个实例</span></span><br><span class="line">        OuterClass oc = <span class="keyword">new</span> OuterClass();</span><br><span class="line">        oc.<span class="function">new <span class="title">InnerClass</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用static修饰内部类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span></span>&#123;</span><br><span class="line">        InnerClass()&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStaticClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// OutClass 不需要生成实例</span></span><br><span class="line">        <span class="keyword">new</span> OuterClass.InnerClass();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="static修饰代码块"><a href="#static修饰代码块" class="headerlink" title="static修饰代码块"></a>static修饰代码块</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它独立于类成员，可以有多个， jvm 加载类的时候会执行这些静态代码块， 如果有<code>static</code>代码块多个，jvm会按照他们在类中出现的顺序执行且每个只执行一次。<strong>可以通过静态代码块对static变量进行赋值。</strong></p><h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><p>final可以修饰非抽象类， 非抽象类成员方法和变量</p><h4 id="final修饰变量"><a href="#final修饰变量" class="headerlink" title="final修饰变量"></a>final修饰变量</h4><p>一个变量可以声明为<code>final</code>， 目的是阻止它的内容被修改， 这意味着声明<code>final</code>变量的时候， 必须对其进行初始化，这种用法有点类似于c++的<code>const</code>。</p><p>通常，我们会用 <code>final</code>定义一些常量 ， 如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">float</span> PI=<span class="number">3.14</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">boolean</span> SUCCESS = <span class="keyword">true</span></span><br><span class="line">.....</span><br></pre></td></tr></table></figure><blockquote><p>按照编码约定， final变量的所有字符选择大写，final修饰的变量实际中不占用内存， 它实质上是一个常数。</p></blockquote><h4 id="final修饰方法"><a href="#final修饰方法" class="headerlink" title="final修饰方法"></a>final修饰方法</h4><p>被final修饰的方法可以被子类继承， 但不能被子类的方法覆盖。 如果一个类不想让其子类覆盖它的某个成员方法， 就可以用 <code>final</code>关键字修饰该方法。</p><blockquote><p>final不能修饰构造方法。 由于父类中<code>private</code> 成员方法不能被子类覆盖， 所有由<code>private</code>修饰的方法默认也是<code>final</code>的。</p></blockquote><p>使用final修饰成员方法除了不想让子类覆盖外， 还有一个原因就是高效，Java编译器在遇到<code>final</code>修饰的方法的时候会转入内嵌机制， 提高执行效率。</p><blockquote><p> 内嵌机制 ，类似于c++ inline, 调用方法的时候直接将方法的主题插入到调用处， 而不用去访问类或者对象， 这样会提高50%左右效率。然而，如果方法主体比较庞大， 且多处被调用将导致主体代码膨胀， 同时也产生效率问题， 所以需要慎用。</p></blockquote><h4 id="final修饰类"><a href="#final修饰类" class="headerlink" title="final修饰类"></a>final修饰类</h4><p><code>final</code>修饰的类不能被继承。</p><h3 id="final和static同时使用"><a href="#final和static同时使用" class="headerlink" title="final和static同时使用"></a>final和static同时使用</h3><p>同时使用 <code>final</code>和<code>static</code>修饰类成员， 该类成员拥有二者特性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LIMIT=<span class="number">100</span>; <span class="comment">// LIMIT表示全局常量</span></span><br></pre></td></tr></table></figure><p>如果是方法的话，方法可以被继承， 可以通过类名被访问， 但是不能被子类覆盖。</p><blockquote><p>对于一些用<code>final</code>和<code>static</code>修饰的容器类型（比如，<code>ArrayList</code>、<code>HashMap</code>）的实例变量，不可以改变容器变量本身，但可以修改容器中存放的对象。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> java关键字 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/11/20/hello-world/"/>
      <url>2020/11/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
